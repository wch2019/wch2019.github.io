{"title":"OpenAPI规范和SpringDoc使用","uid":"44f3816acae6092110e3c35d6f574b7f","slug":"OpenAPI规范和SpringDoc使用","date":"2023-03-10T03:33:42.000Z","updated":"2023-03-24T05:39:07.899Z","comments":true,"path":"api/articles/OpenAPI规范和SpringDoc使用.json","keywords":null,"cover":"../svg/OpenApi3.svg","content":"<h1 id=\"OpenAPI规范和SpringDoc使用\"><a href=\"#OpenAPI规范和SpringDoc使用\" class=\"headerlink\" title=\"OpenAPI规范和SpringDoc使用\"></a>OpenAPI规范和SpringDoc使用</h1><p><img src=\"/../images/openapi.png\" alt=\"openapi.png\"></p>\n<h2 id=\"1-简介\"><a href=\"#1-简介\" class=\"headerlink\" title=\"1. 简介\"></a>1. 简介</h2><p><strong>OpenAPI规范(OAS)<strong>，以前称为</strong>Swagger 规范</strong>，是一种机器可读的<a href=\"https://en.wikipedia.org/wiki/Interface_definition_language\">接口定义语言</a>的规范，用于描述、生成、使用和可视化<a href=\"https://en.wikipedia.org/wiki/Representational_state_transfer\">RESTful </a><a href=\"https://en.wikipedia.org/wiki/Web_API\">Web 服务</a>。它以前是<a href=\"https://en.wikipedia.org/wiki/Swagger_(software)\">Swagger</a>框架的一部分，在 2016 年成为一个单独的项目，由 OpenAPI Initiative 监督，OpenAPI Initiative 是Linux 基金会的一个开源协作项目。 Swagger 和其他一些工具可以从接口文件生成代码、文档和测试用例。</p>\n<h2 id=\"2-规范\"><a href=\"#2-规范\" class=\"headerlink\" title=\"2. 规范\"></a>2. 规范</h2><h3 id=\"2-1-文档版本\"><a href=\"#2-1-文档版本\" class=\"headerlink\" title=\"2.1 文档版本\"></a>2.1 文档版本</h3><p>OpenAPI 规范使用<a href=\"https://semver.org/spec/v2.0.0.html\">语义版本控制 2.0.0</a> (semver) 进行版本控制，并遵循 semver 规范。</p>\n<h3 id=\"2-2-文档格式\"><a href=\"#2-2-文档格式\" class=\"headerlink\" title=\"2.2 文档格式\"></a>2.2 文档格式</h3><p>OpenAPI文档本身是一个JSON对象，可以用JSON或YAML格式表示。</p>\n<p>字段名称<strong>区分大小写</strong>。</p>\n<h3 id=\"2-3-数据类型\"><a href=\"#2-3-数据类型\" class=\"headerlink\" title=\"2.3 数据类型\"></a>2.3 数据类型</h3><ul>\n<li><p>OAS的原始数据类型基于<a href=\"https://tools.ietf.org/html/draft-wright-json-schema-00#section-4.2\">JSON Schema Specification Wright Draft 00</a>，并做了一定的扩展。</p>\n</li>\n<li><p>原始类型有一个可选的修饰属性：<code>format</code>。规范指定了一部分<code>format</code>类型，但也可以对其进行扩展，比如使用<code>email</code>，<code>uuid</code>等，只要能被工具解析即可。</p>\n</li>\n<li><p>OAS定义的格式如下：</p>\n<table>\n<thead>\n<tr>\n<th><code>type</code></th>\n<th><code>format</code></th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>integer</code></td>\n<td><code>int32</code></td>\n<td>32 位有符号 (<code>byte</code>, <code>short</code>, <code>int</code>)</td>\n</tr>\n<tr>\n<td><code>integer</code></td>\n<td><code>int64</code></td>\n<td>64 位有符号（<code>long</code>类型）</td>\n</tr>\n<tr>\n<td><code>number</code></td>\n<td><code>float</code></td>\n<td></td>\n</tr>\n<tr>\n<td><code>number</code></td>\n<td><code>double</code></td>\n<td></td>\n</tr>\n<tr>\n<td><code>string</code></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><code>string</code></td>\n<td><code>byte</code></td>\n<td>base64编码的字符</td>\n</tr>\n<tr>\n<td><code>string</code></td>\n<td><code>binary</code></td>\n<td>任何八位字节序列</td>\n</tr>\n<tr>\n<td><code>boolean</code></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><code>string</code></td>\n<td><code>date</code></td>\n<td>由<a href=\"https://www.rfc-editor.org/rfc/rfc3339#section-5\">RFC3339定义</a>定义的<code>full-date</code></td>\n</tr>\n<tr>\n<td><code>string</code></td>\n<td><code>date-time</code></td>\n<td>由<a href=\"https://www.rfc-editor.org/rfc/rfc3339#section-5\">RFC3339定义</a>的<code>date-time</code></td>\n</tr>\n<tr>\n<td><code>string</code></td>\n<td><code>password</code></td>\n<td>提示界面不应明文输入</td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n<h3 id=\"2-4-富文本格式\"><a href=\"#2-4-富文本格式\" class=\"headerlink\" title=\"2.4 富文本格式\"></a>2.4 富文本格式</h3><p>规范中的**<code>description</code>**字段支持<code>Markdown</code>格式。</p>\n<h2 id=\"3-框架\"><a href=\"#3-框架\" class=\"headerlink\" title=\"3. 框架\"></a>3. 框架</h2><h3 id=\"3-1-固定字段\"><a href=\"#3-1-固定字段\" class=\"headerlink\" title=\"3.1 固定字段\"></a>3.1 固定字段</h3><table>\n<thead>\n<tr>\n<th>字段名</th>\n<th>类型</th>\n<th>是否必需</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>openapi</td>\n<td>string</td>\n<td><strong>是</strong></td>\n<td>OpenAPI规范的版本号。</td>\n</tr>\n<tr>\n<td>info</td>\n<td>Info 对象</td>\n<td><strong>是</strong></td>\n<td>API相关的元数据。</td>\n</tr>\n<tr>\n<td>servers</td>\n<td>[Server 对象]</td>\n<td>否</td>\n<td>Server对象的数组， 提供到服务器的连接信息</td>\n</tr>\n<tr>\n<td>paths</td>\n<td>Paths 对象</td>\n<td><strong>是</strong></td>\n<td>API的可用路径和操作。</td>\n</tr>\n<tr>\n<td>components</td>\n<td>Component 对象</td>\n<td>否</td>\n<td>一个包含多种结构的组件</td>\n</tr>\n<tr>\n<td>security</td>\n<td>[Security Requirement 对象]</td>\n<td>否</td>\n<td>可以在 API 中使用哪些安全机制的声明</td>\n</tr>\n<tr>\n<td>tags</td>\n<td>[Tag 对象]</td>\n<td>否</td>\n<td>带有附加元数据的标签列表，每个标签名称必须是唯一的</td>\n</tr>\n<tr>\n<td>externalDocs</td>\n<td>External Documentation 对象</td>\n<td>否</td>\n<td>额外的外部文档。</td>\n</tr>\n</tbody></table>\n<p><img src=\"/../images/openapi1.jpg\" alt=\"openapi1.jpg\"></p>\n<h3 id=\"3-2-Paths-对象\"><a href=\"#3-2-Paths-对象\" class=\"headerlink\" title=\"3.2 Paths 对象\"></a>3.2 Paths 对象</h3><pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">Paths:\n  PathItem:\n    Operation:     # @Operation注解，http方法根据 @GetMapping @PostMapping等注解判断\n      - summary           # @Operation(summary &#x3D; &quot;保存用户信息&quot;, description &#x3D; &quot;保存用户信息&quot;) 对应summary\n      - description       # @Operation(summary &#x3D; &quot;保存用户信息&quot;, description &#x3D; &quot;保存用户信息&quot;) 对应description\n      - tags              # 指定tag\n      - parameters        # url参数，对应@Parameter注解，如果参数放在了类中，需要在类上添加@ParameterObject注解\n      - requestBody       # requestBody，对应@RequestBody注解的类\n      - responses         # responseBody，controller方法的返回对象</code></pre>\n\n<h3 id=\"3-3-Operation对象\"><a href=\"#3-3-Operation对象\" class=\"headerlink\" title=\"3.3 Operation对象\"></a>3.3 Operation对象</h3><ul>\n<li><p>描述路径上的单个API操作。包括<code>get</code>, <code>post</code>, <code>delete</code>, <code>put</code>, <code>options</code>等</p>\n</li>\n<li><p>常用字段</p>\n<table>\n<thead>\n<tr>\n<th>字段名</th>\n<th>类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>summary</td>\n<td><code>string</code></td>\n<td>该操作的作用的简短摘要。</td>\n</tr>\n<tr>\n<td>description</td>\n<td><code>string</code></td>\n<td>对操作行为的详细解释。支持markdown语法</td>\n</tr>\n<tr>\n<td>parameters</td>\n<td>[Parameter对象 或 Reference对象]</td>\n<td>适用于此操作的参数列表</td>\n</tr>\n<tr>\n<td>requestBody</td>\n<td>Request Body对象 或 Reference对象</td>\n<td>适用于此操作的请求正文</td>\n</tr>\n<tr>\n<td>responses</td>\n<td>Responses 对象</td>\n<td>执行此操作返回的可能响应列表</td>\n</tr>\n<tr>\n<td>tags</td>\n<td>[<code>string</code>]</td>\n<td>API 文档控制的标签列表</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>配置方式</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Operation(summary &#x3D; &quot;获取用户列表&quot;,\n        description &#x3D; &quot;&quot;&quot;\n                &lt;b&gt;获取*用户*列表&lt;&#x2F;b&gt;\n                - username: 用户名\n                - status: 状态\n                &quot;&quot;&quot;\n)\n@GetMapping(&quot;users&quot;)\npublic List&lt;UserDTO&gt; getUsers(@ParameterObject UserQuery query) &#123;\n    var userDTO &#x3D; getUser();\n    return List.of(userDTO);\n&#125;</code></pre></li>\n</ul>\n<h3 id=\"3-4-Parameter对象\"><a href=\"#3-4-Parameter对象\" class=\"headerlink\" title=\"3.4 Parameter对象\"></a>3.4 Parameter对象</h3><ul>\n<li><p>描述单个操作的参数，通过<code>in</code>字段定义了4种不同的参数位置</p>\n<ul>\n<li><p>path - URL中的参数。例如<code>items/&#123;itemId&#125;</code>，<code>itemId</code>是路径参数</p>\n</li>\n<li><p>query - 附加在URL后的参数。例如<code>items?id=1</code>，请求参数为<code>id</code></p>\n</li>\n<li><p>header - 自定义header中参数</p>\n</li>\n<li><p>cookie - 通过cookie传的参数</p>\n</li>\n</ul>\n</li>\n<li><p>常用字段：</p>\n<table>\n<thead>\n<tr>\n<th>字段名</th>\n<th>类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>name</td>\n<td>string</td>\n<td>字段名，<strong>用默认值，不要做任何修改</strong></td>\n</tr>\n<tr>\n<td>in</td>\n<td>string</td>\n<td>参数的位置，包括<code>path</code>, <code>query</code>, <code>header</code>, <code>cookie</code>4种，不需要设置</td>\n</tr>\n<tr>\n<td><strong>description</strong></td>\n<td>string</td>\n<td>参数的描述，支持markdown</td>\n</tr>\n<tr>\n<td><strong>required</strong></td>\n<td>boolean</td>\n<td>参数是否必需。<code>path</code>中的参数必须设置成true</td>\n</tr>\n<tr>\n<td>deprecated</td>\n<td>boolean</td>\n<td>参数是否废弃</td>\n</tr>\n<tr>\n<td><strong>schema</strong></td>\n<td>Schema对象</td>\n<td>定义用于参数的类型的模式。</td>\n</tr>\n<tr>\n<td><strong>example</strong></td>\n<td>Any</td>\n<td>参数示例</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>配置方式</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Parameter(\n        description &#x3D; &quot;&quot;&quot;\n                状态\n                - 1: 启用\n                - 2: 禁用\n                - 3: 锁定\n                &quot;&quot;&quot;,\n        required &#x3D; true,\n        schema &#x3D; @Schema(allowableValues &#x3D; &#123;&quot;1&quot;, &quot;2&quot;, &quot;3&quot;&#125;, type &#x3D; &quot;integer&quot;))\nprivate Byte status;</code></pre></li>\n</ul>\n<h3 id=\"3-5-Request-Body-对象\"><a href=\"#3-5-Request-Body-对象\" class=\"headerlink\" title=\"3.5 Request Body 对象\"></a>3.5 Request Body 对象</h3><p>请求体，添加<code>@RequestBody</code>即可</p>\n<h3 id=\"3-6-Response-对象\"><a href=\"#3-6-Response-对象\" class=\"headerlink\" title=\"3.6 Response 对象\"></a>3.6 Response 对象</h3><p>方法的返回值</p>\n<h3 id=\"3-7-Schema对象\"><a href=\"#3-7-Schema对象\" class=\"headerlink\" title=\"3.7 Schema对象\"></a>3.7 Schema对象</h3><ul>\n<li><p>Schema对象定义输入和输出数据类型。这些类型可以是对象，也可以是基础类型和数组</p>\n</li>\n<li><p>常用的字段有<code>title</code>, <code>maxLength</code>, <code>minLength</code>, <code>maximum</code>, <code>minimum</code>, <code>pattern</code>, <code>enum</code> 等</p>\n</li>\n<li><p>使用方式：一般是在DTO、VO的字段上使用</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Schema(title &#x3D; &quot;用户名&quot;)\nprivate String username;</code></pre></li>\n</ul>\n<h3 id=\"3-8-Tag对象\"><a href=\"#3-8-Tag对象\" class=\"headerlink\" title=\"3.8 Tag对象\"></a>3.8 Tag对象</h3><ul>\n<li><p>使用<code>Tag</code>对象添加元数据，作用于<code>Operation</code>对象上</p>\n</li>\n<li><p>使用方法</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Tag(name &#x3D; &quot;user&quot;, description &#x3D; &quot;涉及用户的操作，包括增删改查等操作&quot;)\n@RestController\npublic class UserController &#123;</code></pre></li>\n</ul>\n<h3 id=\"3-9-扩展\"><a href=\"#3-9-扩展\" class=\"headerlink\" title=\"3.9 扩展\"></a>3.9 扩展</h3><p>扩展属性需要以<code>x-</code>开头。</p>\n<p>以<a href=\"https://github.com/OpenAPITools/openapi-generator\">openapi-generator</a>为例，该工具扩展了<code>enum</code>属性，添加了<code>x-enum-varnames</code>等字段，用来表示<code>enum</code>的值。我们可以通过@Extention注解来实现属性扩展。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Schema(title &#x3D; &quot;状态&quot;,\n            type &#x3D; &quot;integer&quot;,\n            allowableValues &#x3D; &#123;&quot;1&quot;, &quot;2&quot;, &quot;3&quot;&#125;,\n            extensions &#x3D; @Extension(\n                    properties &#x3D; @ExtensionProperty(\n                            name &#x3D; &quot;enum-varnames&quot;,\n                            value &#x3D; &quot;&quot;&quot;\n                                    [&quot;启用&quot;,&quot;禁用&quot;,&quot;锁定&quot;]\n                                    &quot;&quot;&quot;,\n                            parseValue &#x3D; true\n                    )\n            ))\nprivate Byte status;</code></pre>\n\n\n\n<h2 id=\"4-SpringDoc-使用\"><a href=\"#4-SpringDoc-使用\" class=\"headerlink\" title=\"4. SpringDoc 使用\"></a>4. SpringDoc 使用</h2><ol>\n<li><p>Controller类上使用<code>@Tag</code>注解，方法上使用<code>@Operation</code>注解</p>\n</li>\n<li><p><code>@Tag</code>注解的name可以不配置，默认是类名(短横线连接)，如果配置，则<b>必须使用英文</b></p>\n</li>\n<li><p>需要区分<em>请求参数</em>和<em>RequestBody</em>。请求参数字段使用<code>@Parameter</code>注解，RequestBody中的字段使用<code>@Schema</code>注解</p>\n</li>\n<li><p>请求参数数量超过2个时，应将封装在一个Query类中，并在该类上使用<code>@ParameterObject</code>注解，类的字段使用<code>@Parameter</code>注解</p>\n</li>\n<li><p><code>Byte</code>，<code>Short</code>类型，SpringDoc会识别为<code>string</code>类型，应将其手动设置成<code>integer</code>类型，设置方法如下</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;&#x2F; schema的设置方式\n@Schema(title &#x3D; &quot;状态&quot;,type &#x3D; &quot;integer&quot;)\nprivate Byte status;\n&#x2F;&#x2F; parameter的设置方式\n@Parameter(description &#x3D; &quot;状态&quot;, schema &#x3D; @Schema(type &#x3D; &quot;integer&quot;))\nprivate Byte status;</code></pre>\n</li>\n<li><p>枚举类需要通过<code>@Schema</code>注解的<code>allowableValues</code>参数进行配置。<code>openapi-generator</code>工具使用了扩展字段<code>x-enum-varnames</code>来描述枚举对应的值，扩展字段可以通过<code>@Extension</code>注解来实现，示例如下</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Schema(title &#x3D; &quot;状态&quot;,\n        type &#x3D; &quot;integer&quot;,\n        allowableValues &#x3D; &#123;&quot;1&quot;, &quot;2&quot;, &quot;3&quot;&#125;, &#x2F;&#x2F; 枚举值\n        extensions &#x3D; @Extension(\n                properties &#x3D; @ExtensionProperty(\n                        name &#x3D; &quot;enum-varnames&quot;,  &#x2F;&#x2F; 扩展字段的字段名，会自动添加&#96;x-&#96;前缀\n                        value &#x3D; &quot;&quot;&quot;\n                                [&quot;启用&quot;,&quot;禁用&quot;,&quot;锁定&quot;]\n                                &quot;&quot;&quot;, &#x2F;&#x2F; 固定设置为json array格式，array中的每个值与allowableValues中的枚举值对应\n                        parseValue &#x3D; true &#x2F;&#x2F; 设置true，可将value解析成array\n                )\n        ))\nprivate Byte status;</code></pre>\n</li>\n<li><p>SpringDoc支持常用的<a href=\"https://beanvalidation.org/1.0/spec/\">JSR-303</a>注解，如*@NotNull*, <em>@NotBlank</em>, <em>@Size</em>, <em>@Min</em>, <em>@Max</em> 等</p>\n</li>\n<li><p>注意书写规范，方法名、参数名、成员变量、局部变量必须使用<code>lowerCamelCase</code>风格，类名使用 UpperCamelCase 风格。</p>\n</li>\n<li><p>文件上传，需要将 Content-Type 设置为 multipart&#x2F;form-data ，设置方法是将 @PostMapping<br>的 consumes 属性设置为 multipart&#x2F;form-data 。示例如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">@Operation(summary &#x3D; &quot;上传文件&quot;)\n@PostMapping(value &#x3D; &quot;upload-file&quot;, consumes &#x3D; MediaType.MULTIPART_FORM_DATA_VALUE)\npublic void upload(@RequestBody MultipartFile file) &#123;\n&#125;</code></pre></li>\n</ol>\n<h2 id=\"附录\"><a href=\"#附录\" class=\"headerlink\" title=\"附录\"></a>附录</h2><ul>\n<li><p>参考</p>\n<ol>\n<li><a href=\"https://www.baeldung.com/spring-rest-openapi-documentation\">Documenting a Spring REST API Using OpenAPI 3.0</a></li>\n<li><a href=\"https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md\">OpenAPI Specification</a></li>\n<li><a href=\"https://openapi-generator.tech/docs/templating#all-generators-core\">openapi-generator文档</a></li>\n<li><a href=\"https://springdoc.org/\">Springdoc文档</a></li>\n</ol>\n</li>\n<li><p>一份完整的OpenApi文档</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">&#123;\n    &quot;openapi&quot;: &quot;3.0.1&quot;,\n    &quot;info&quot;: &#123;\n        &quot;title&quot;: &quot;openapi示例&quot;,\n        &quot;description&quot;: &quot;用于演示Springdoc的用法&quot;,\n        &quot;version&quot;: &quot;1.0.0&quot;\n    &#125;,\n    &quot;servers&quot;: [\n        &#123;\n            &quot;url&quot;: &quot;http:&#x2F;&#x2F;localhost:8080&quot;,\n            &quot;description&quot;: &quot;Generated server url&quot;\n        &#125;\n    ],\n    &quot;security&quot;: [\n        &#123;\n            &quot;authentication&quot;: []\n        &#125;\n    ],\n    &quot;tags&quot;: [\n        &#123;\n            &quot;name&quot;: &quot;role&quot;,\n            &quot;description&quot;: &quot;涉及用户的操作，包括增删改查等操作&quot;\n        &#125;,\n        &#123;\n            &quot;name&quot;: &quot;user&quot;,\n            &quot;description&quot;: &quot;涉及用户的操作，包括增删改查等操作&quot;\n        &#125;\n    ],\n    &quot;paths&quot;: &#123;\n        &quot;&#x2F;users&quot;: &#123;\n            &quot;get&quot;: &#123;\n                &quot;tags&quot;: [\n                    &quot;user&quot;\n                ],\n                &quot;summary&quot;: &quot;获取用户列表&quot;,\n                &quot;description&quot;: &quot;&lt;b&gt;获取*用户*列表&lt;&#x2F;b&gt;\\n- username: 用户名\\n- status: 状态\\n&quot;,\n                &quot;operationId&quot;: &quot;getUsers&quot;,\n                &quot;parameters&quot;: [\n                    &#123;\n                        &quot;name&quot;: &quot;username&quot;,\n                        &quot;in&quot;: &quot;query&quot;,\n                        &quot;description&quot;: &quot;用户名&quot;,\n                        &quot;required&quot;: false,\n                        &quot;schema&quot;: &#123;\n                            &quot;type&quot;: &quot;string&quot;\n                        &#125;\n                    &#125;,\n                    &#123;\n                        &quot;name&quot;: &quot;status&quot;,\n                        &quot;in&quot;: &quot;query&quot;,\n                        &quot;description&quot;: &quot;状态\\n- 1: 启用\\n- 2: 禁用\\n- 3: 锁定\\n&quot;,\n                        &quot;required&quot;: false,\n                        &quot;schema&quot;: &#123;\n                            &quot;maximum&quot;: 3,\n                            &quot;minimum&quot;: 1,\n                            &quot;type&quot;: &quot;integer&quot;,\n                            &quot;enum&quot;: [\n                                &quot;1&quot;,\n                                &quot;2&quot;,\n                                &quot;3&quot;\n                            ]\n                        &#125;\n                    &#125;\n                ],\n                &quot;responses&quot;: &#123;\n                    &quot;200&quot;: &#123;\n                        &quot;description&quot;: &quot;OK&quot;,\n                        &quot;content&quot;: &#123;\n                            &quot;*&#x2F;*&quot;: &#123;\n                                &quot;schema&quot;: &#123;\n                                    &quot;type&quot;: &quot;array&quot;,\n                                    &quot;items&quot;: &#123;\n                                        &quot;$ref&quot;: &quot;#&#x2F;components&#x2F;schemas&#x2F;UserDTO&quot;\n                                    &#125;\n                                &#125;\n                            &#125;\n                        &#125;\n                    &#125;,\n                    &quot;400&quot;: &#123;\n                        &quot;description&quot;: &quot;Bad Request&quot;,\n                        &quot;content&quot;: &#123;\n                            &quot;*&#x2F;*&quot;: &#123;\n                                &quot;schema&quot;: &#123;\n                                    &quot;$ref&quot;: &quot;#&#x2F;components&#x2F;schemas&#x2F;ResponseError&quot;\n                                &#125;\n                            &#125;\n                        &#125;\n                    &#125;,\n                    &quot;500&quot;: &#123;\n                        &quot;description&quot;: &quot;Internal Server Error&quot;,\n                        &quot;content&quot;: &#123;\n                            &quot;*&#x2F;*&quot;: &#123;\n                                &quot;schema&quot;: &#123;\n                                    &quot;$ref&quot;: &quot;#&#x2F;components&#x2F;schemas&#x2F;ResponseError&quot;\n                                &#125;\n                            &#125;\n                        &#125;\n                    &#125;\n                &#125;\n            &#125;,\n            &quot;post&quot;: &#123;\n                &quot;tags&quot;: [\n                    &quot;user&quot;\n                ],\n                &quot;summary&quot;: &quot;保存用户信息&quot;,\n                &quot;operationId&quot;: &quot;saveUser&quot;,\n                &quot;requestBody&quot;: &#123;\n                    &quot;content&quot;: &#123;\n                        &quot;application&#x2F;json&quot;: &#123;\n                            &quot;schema&quot;: &#123;\n                                &quot;$ref&quot;: &quot;#&#x2F;components&#x2F;schemas&#x2F;UserVO&quot;\n                            &#125;\n                        &#125;\n                    &#125;,\n                    &quot;required&quot;: true\n                &#125;,\n                &quot;responses&quot;: &#123;\n                    &quot;200&quot;: &#123;\n                        &quot;description&quot;: &quot;OK&quot;,\n                        &quot;content&quot;: &#123;\n                            &quot;*&#x2F;*&quot;: &#123;\n                                &quot;schema&quot;: &#123;\n                                    &quot;$ref&quot;: &quot;#&#x2F;components&#x2F;schemas&#x2F;UserDTO&quot;\n                                &#125;\n                            &#125;\n                        &#125;\n                    &#125;,\n                    &quot;400&quot;: &#123;\n                        &quot;description&quot;: &quot;Bad Request&quot;,\n                        &quot;content&quot;: &#123;\n                            &quot;*&#x2F;*&quot;: &#123;\n                                &quot;schema&quot;: &#123;\n                                    &quot;$ref&quot;: &quot;#&#x2F;components&#x2F;schemas&#x2F;ResponseError&quot;\n                                &#125;\n                            &#125;\n                        &#125;\n                    &#125;,\n                    &quot;500&quot;: &#123;\n                        &quot;description&quot;: &quot;Internal Server Error&quot;,\n                        &quot;content&quot;: &#123;\n                            &quot;*&#x2F;*&quot;: &#123;\n                                &quot;schema&quot;: &#123;\n                                    &quot;$ref&quot;: &quot;#&#x2F;components&#x2F;schemas&#x2F;ResponseError&quot;\n                                &#125;\n                            &#125;\n                        &#125;\n                    &#125;\n                &#125;\n            &#125;\n        &#125;,\n        &quot;&#x2F;users&#x2F;&#123;id&#125;&quot;: &#123;\n            &quot;get&quot;: &#123;\n                &quot;tags&quot;: [\n                    &quot;user&quot;\n                ],\n                &quot;summary&quot;: &quot;获取单个用户信息&quot;,\n                &quot;operationId&quot;: &quot;getUser&quot;,\n                &quot;parameters&quot;: [\n                    &#123;\n                        &quot;name&quot;: &quot;id&quot;,\n                        &quot;in&quot;: &quot;path&quot;,\n                        &quot;description&quot;: &quot;用户id&quot;,\n                        &quot;required&quot;: true,\n                        &quot;schema&quot;: &#123;\n                            &quot;type&quot;: &quot;string&quot;\n                        &#125;\n                    &#125;\n                ],\n                &quot;responses&quot;: &#123;\n                    &quot;200&quot;: &#123;\n                        &quot;description&quot;: &quot;OK&quot;,\n                        &quot;content&quot;: &#123;\n                            &quot;*&#x2F;*&quot;: &#123;\n                                &quot;schema&quot;: &#123;\n                                    &quot;$ref&quot;: &quot;#&#x2F;components&#x2F;schemas&#x2F;UserDTO&quot;\n                                &#125;\n                            &#125;\n                        &#125;\n                    &#125;,\n                    &quot;400&quot;: &#123;\n                        &quot;description&quot;: &quot;Bad Request&quot;,\n                        &quot;content&quot;: &#123;\n                            &quot;*&#x2F;*&quot;: &#123;\n                                &quot;schema&quot;: &#123;\n                                    &quot;$ref&quot;: &quot;#&#x2F;components&#x2F;schemas&#x2F;ResponseError&quot;\n                                &#125;\n                            &#125;\n                        &#125;\n                    &#125;,\n                    &quot;500&quot;: &#123;\n                        &quot;description&quot;: &quot;Internal Server Error&quot;,\n                        &quot;content&quot;: &#123;\n                            &quot;*&#x2F;*&quot;: &#123;\n                                &quot;schema&quot;: &#123;\n                                    &quot;$ref&quot;: &quot;#&#x2F;components&#x2F;schemas&#x2F;ResponseError&quot;\n                                &#125;\n                            &#125;\n                        &#125;\n                    &#125;\n                &#125;\n            &#125;\n        &#125;,\n        &quot;&#x2F;roles&quot;: &#123;\n            &quot;get&quot;: &#123;\n                &quot;tags&quot;: [\n                    &quot;role&quot;\n                ],\n                &quot;operationId&quot;: &quot;getRoles&quot;,\n                &quot;responses&quot;: &#123;\n                    &quot;200&quot;: &#123;\n                        &quot;description&quot;: &quot;OK&quot;,\n                        &quot;content&quot;: &#123;\n                            &quot;*&#x2F;*&quot;: &#123;\n                                &quot;schema&quot;: &#123;\n                                    &quot;type&quot;: &quot;array&quot;,\n                                    &quot;items&quot;: &#123;\n                                        &quot;$ref&quot;: &quot;#&#x2F;components&#x2F;schemas&#x2F;RoleDTO&quot;\n                                    &#125;\n                                &#125;\n                            &#125;\n                        &#125;\n                    &#125;,\n                    &quot;400&quot;: &#123;\n                        &quot;description&quot;: &quot;Bad Request&quot;,\n                        &quot;content&quot;: &#123;\n                            &quot;*&#x2F;*&quot;: &#123;\n                                &quot;schema&quot;: &#123;\n                                    &quot;$ref&quot;: &quot;#&#x2F;components&#x2F;schemas&#x2F;ResponseError&quot;\n                                &#125;\n                            &#125;\n                        &#125;\n                    &#125;,\n                    &quot;500&quot;: &#123;\n                        &quot;description&quot;: &quot;Internal Server Error&quot;,\n                        &quot;content&quot;: &#123;\n                            &quot;*&#x2F;*&quot;: &#123;\n                                &quot;schema&quot;: &#123;\n                                    &quot;$ref&quot;: &quot;#&#x2F;components&#x2F;schemas&#x2F;ResponseError&quot;\n                                &#125;\n                            &#125;\n                        &#125;\n                    &#125;\n                &#125;\n            &#125;\n        &#125;\n    &#125;,\n    &quot;components&quot;: &#123;\n        &quot;schemas&quot;: &#123;\n            &quot;ResponseError&quot;: &#123;\n                &quot;type&quot;: &quot;object&quot;,\n                &quot;properties&quot;: &#123;\n                    &quot;code&quot;: &#123;\n                        &quot;title&quot;: &quot;异常代码&quot;,\n                        &quot;type&quot;: &quot;string&quot;,\n                        &quot;example&quot;: &quot;400&quot;\n                    &#125;,\n                    &quot;message&quot;: &#123;\n                        &quot;title&quot;: &quot;异常信息&quot;,\n                        &quot;type&quot;: &quot;string&quot;,\n                        &quot;example&quot;: &quot;该参数不能为空&quot;\n                    &#125;,\n                    &quot;errors&quot;: &#123;\n                        &quot;type&quot;: &quot;object&quot;\n                    &#125;\n                &#125;,\n                &quot;description&quot;: &quot;&quot;\n            &#125;,\n            &quot;UserVO&quot;: &#123;\n                &quot;required&quot;: [\n                    &quot;phone&quot;,\n                    &quot;username&quot;\n                ],\n                &quot;type&quot;: &quot;object&quot;,\n                &quot;properties&quot;: &#123;\n                    &quot;username&quot;: &#123;\n                        &quot;title&quot;: &quot;用户名&quot;,\n                        &quot;maxLength&quot;: 20,\n                        &quot;minLength&quot;: 5,\n                        &quot;type&quot;: &quot;string&quot;,\n                        &quot;example&quot;: &quot;admin&quot;\n                    &#125;,\n                    &quot;nickname&quot;: &#123;\n                        &quot;title&quot;: &quot;昵称&quot;,\n                        &quot;maxLength&quot;: 20,\n                        &quot;minLength&quot;: 0,\n                        &quot;type&quot;: &quot;string&quot;,\n                        &quot;example&quot;: &quot;dongting&quot;\n                    &#125;,\n                    &quot;phone&quot;: &#123;\n                        &quot;title&quot;: &quot;手机号&quot;,\n                        &quot;pattern&quot;: &quot;^1[3-9][0-9]&#123;9&#125;$&quot;,\n                        &quot;type&quot;: &quot;string&quot;\n                    &#125;\n                &#125;,\n                &quot;description&quot;: &quot;&quot;\n            &#125;,\n            &quot;UserDTO&quot;: &#123;\n                &quot;type&quot;: &quot;object&quot;,\n                &quot;properties&quot;: &#123;\n                    &quot;id&quot;: &#123;\n                        &quot;title&quot;: &quot;主键&quot;,\n                        &quot;type&quot;: &quot;integer&quot;,\n                        &quot;format&quot;: &quot;int64&quot;\n                    &#125;,\n                    &quot;username&quot;: &#123;\n                        &quot;title&quot;: &quot;用户名&quot;,\n                        &quot;type&quot;: &quot;string&quot;\n                    &#125;,\n                    &quot;nickname&quot;: &#123;\n                        &quot;title&quot;: &quot;昵称&quot;,\n                        &quot;type&quot;: &quot;string&quot;\n                    &#125;,\n                    &quot;avatar&quot;: &#123;\n                        &quot;title&quot;: &quot;头像&quot;,\n                        &quot;type&quot;: &quot;string&quot;,\n                        &quot;description&quot;: &quot;用户头像，base64&quot;,\n                        &quot;format&quot;: &quot;byte&quot;\n                    &#125;,\n                    &quot;status&quot;: &#123;\n                        &quot;title&quot;: &quot;状态&quot;,\n                        &quot;type&quot;: &quot;integer&quot;,\n                        &quot;format&quot;: &quot;int32&quot;,\n                        &quot;enum&quot;: [\n                            1,\n                            2,\n                            3\n                        ],\n                        &quot;x-enum-varnames&quot;: [\n                            &quot;启用&quot;,\n                            &quot;禁用&quot;,\n                            &quot;锁定&quot;\n                        ]\n                    &#125;,\n                    &quot;roles&quot;: &#123;\n                        &quot;title&quot;: &quot;角色&quot;,\n                        &quot;type&quot;: &quot;array&quot;,\n                        &quot;items&quot;: &#123;\n                            &quot;title&quot;: &quot;角色&quot;,\n                            &quot;type&quot;: &quot;string&quot;\n                        &#125;\n                    &#125;\n                &#125;,\n                &quot;description&quot;: &quot;&quot;\n            &#125;,\n            &quot;RoleDTO&quot;: &#123;\n                &quot;type&quot;: &quot;object&quot;,\n                &quot;properties&quot;: &#123;\n                    &quot;name&quot;: &#123;\n                        &quot;type&quot;: &quot;string&quot;\n                    &#125;\n                &#125;,\n                &quot;description&quot;: &quot;&quot;\n            &#125;\n        &#125;,\n        &quot;securitySchemes&quot;: &#123;\n            &quot;authentication&quot;: &#123;\n                &quot;type&quot;: &quot;apiKey&quot;,\n                &quot;name&quot;: &quot;authentication&quot;,\n                &quot;in&quot;: &quot;header&quot;\n            &#125;\n        &#125;\n    &#125;\n&#125;</code></pre>\n\n","text":"OpenAPI规范和SpringDoc使用 1. 简介OpenAPI规范(OAS)，以前称为Swagger 规范，是一种机器可读的接口定义语言的规范，用于描述、生成、使用和可视化RESTful Web 服务。它以前是Swagger框架的一部分，在 2016 年成为一个单独的项目，...","link":"","photos":[],"count_time":{"symbolsCount":"24k","symbolsTime":"21 mins."},"categories":[{"name":"Java","slug":"Java","count":9,"path":"api/categories/Java.json"}],"tags":[{"name":"Java","slug":"Java","count":10,"path":"api/tags/Java.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#OpenAPI%E8%A7%84%E8%8C%83%E5%92%8CSpringDoc%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">OpenAPI规范和SpringDoc使用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\">1. 简介</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-%E8%A7%84%E8%8C%83\"><span class=\"toc-text\">2. 规范</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-1-%E6%96%87%E6%A1%A3%E7%89%88%E6%9C%AC\"><span class=\"toc-text\">2.1 文档版本</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-2-%E6%96%87%E6%A1%A3%E6%A0%BC%E5%BC%8F\"><span class=\"toc-text\">2.2 文档格式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-3-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">2.3 数据类型</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-4-%E5%AF%8C%E6%96%87%E6%9C%AC%E6%A0%BC%E5%BC%8F\"><span class=\"toc-text\">2.4 富文本格式</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-%E6%A1%86%E6%9E%B6\"><span class=\"toc-text\">3. 框架</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-1-%E5%9B%BA%E5%AE%9A%E5%AD%97%E6%AE%B5\"><span class=\"toc-text\">3.1 固定字段</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-2-Paths-%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">3.2 Paths 对象</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-3-Operation%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">3.3 Operation对象</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-4-Parameter%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">3.4 Parameter对象</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-5-Request-Body-%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">3.5 Request Body 对象</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-6-Response-%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">3.6 Response 对象</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-7-Schema%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">3.7 Schema对象</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-8-Tag%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">3.8 Tag对象</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-9-%E6%89%A9%E5%B1%95\"><span class=\"toc-text\">3.9 扩展</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-SpringDoc-%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">4. SpringDoc 使用</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%99%84%E5%BD%95\"><span class=\"toc-text\">附录</span></a></li></ol></li></ol>","author":{"name":"小海","slug":"blog-author","avatar":"/avatar/avatar.jpg","link":"/","description":"用一点点代码,改变生活","socials":{"github":"https://github.com/xiaohai-store","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_27873145","juejin":"","customs":{"gitee":{"icon":"/svg/gitee-fill-round.svg","link":"https://gitee.com/wch2020"}}}},"mapped":true,"prev_post":{"title":"hexo搭建","uid":"4d178542e742a642ab21284220759956","slug":"blog/hexo搭建/hexo搭建","date":"2023-03-16T01:43:19.000Z","updated":"2023-03-17T10:42:03.544Z","comments":true,"path":"api/articles/blog/hexo搭建/hexo搭建.json","keywords":null,"cover":"../../../images/blog/hexo搭建/hexo.png","text":"hexo搭建 什么是hexo？ Hexo是一个基于Node.js的静态博客生成器，可以将Markdown格式的文本转换成静态网页的形式。 它支持大量的主题和插件，可以方便地定制自己的博客主题和功能。 Hexo还支持多种发布方式， 包括将生成的静态网页部署到Github Pages...","link":"","photos":[],"count_time":{"symbolsCount":"3.1k","symbolsTime":"3 mins."},"categories":[{"name":"blog","slug":"blog","count":1,"path":"api/categories/blog.json"}],"tags":[{"name":"blog","slug":"blog","count":1,"path":"api/tags/blog.json"}],"author":{"name":"小海","slug":"blog-author","avatar":"/avatar/avatar.jpg","link":"/","description":"用一点点代码,改变生活","socials":{"github":"https://github.com/xiaohai-store","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_27873145","juejin":"","customs":{"gitee":{"icon":"/svg/gitee-fill-round.svg","link":"https://gitee.com/wch2020"}}}}},"next_post":{"title":"nvm for windows 下载、安装及使用","uid":"d459146c27d3881c39d30204014457f4","slug":"nvm for windows 下载、安装及使用","date":"2023-02-26T10:19:42.000Z","updated":"2023-03-16T07:30:46.435Z","comments":true,"path":"api/articles/nvm for windows 下载、安装及使用.json","keywords":null,"cover":"../images/nodejs.png","text":"nvm for windows 下载、安装及使用 nvm是node版本管理工具，可以运行在多种操作系统上。这里主要记录一下在windows系统的安装和使用。 下载NVM for Windows 下载地址： github.com&#x2F;coreybutler… 只需点击第三个，...","link":"","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[{"name":"web","slug":"web","count":5,"path":"api/categories/web.json"}],"tags":[{"name":"web","slug":"web","count":5,"path":"api/tags/web.json"}],"author":{"name":"小海","slug":"blog-author","avatar":"/avatar/avatar.jpg","link":"/","description":"用一点点代码,改变生活","socials":{"github":"https://github.com/xiaohai-store","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_27873145","juejin":"","customs":{"gitee":{"icon":"/svg/gitee-fill-round.svg","link":"https://gitee.com/wch2020"}}}}}}