{"title":"docker","uid":"4122a09df2e4f3d18921791a0dcc0507","slug":"docker","date":"2022-05-12T07:33:42.000Z","updated":"2023-03-15T03:59:58.861Z","comments":true,"path":"api/articles/docker.json","keywords":null,"cover":"../images/docker.jpg","content":"<h2 id=\"docker\"><a href=\"#docker\" class=\"headerlink\" title=\"docker\"></a>docker</h2><h3 id=\"更新-yum\"><a href=\"#更新-yum\" class=\"headerlink\" title=\"更新 yum\"></a>更新 yum</h3><p>我们会通过 yum 来安装 Docker, 所以首先更新 yum</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">yum -y update</code></pre>\n<h3 id=\"安装docker\"><a href=\"#安装docker\" class=\"headerlink\" title=\"安装docker\"></a>安装docker</h3><p>接着就是安装 Docker</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">yum install docker -y</code></pre>\n<p>仅仅安装了还不行，还要启动</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">systemctl start docker.service\nsystemctl status docker.service</code></pre>\n<p>设置docker开机自启</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">systemctl enable docker</code></pre>\n\n<p>看到那个 active 就表示已经在运行啦<br>以下是docker 的生命周期管理常用命令：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">systemctl stop docker.service\nsystemctl start docker.service\nsystemctl restart docker.service\nsystemctl status docker.service</code></pre>\n<h3 id=\"镜像管理\"><a href=\"#镜像管理\" class=\"headerlink\" title=\"镜像管理\"></a>镜像管理</h3><p><img src=\"https://raw.githubusercontent.com/xiaohai-store/notes-img/main/1.png\" alt=\"1\"></p>\n<p><strong>1. search 查看仓库里有些什么镜像</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">docker search tomcat</code></pre>\n<p>会出来很多，那么到底应该用哪个呢？</p>\n<p>这时，就打开 hub.docker.com ，然后搜索 tomcat。 或者点击如下链接</p>\n<p><a href=\"https://hub.docker.com/search?q=tomcat&type=image\">https://hub.docker.com/search?q=tomcat&amp;type=image</a></p>\n<p>可以看到更多的 tomcat了。</p>\n<p>而第一个，就是docker 官网提供的 tomcat了，一般就用他了吧。。。</p>\n<p><strong>2. pull 拉取镜像</strong></p>\n<p>tomcat 又有很多版本，到底选哪个呢？</p>\n<p>点击官网的 Tomcat 镜像，然后点击 tag，就发现又有很多版本</p>\n<p><a href=\"https://hub.docker.com/_/tomcat?tab=tags\">https://hub.docker.com/_/tomcat?tab=tags</a><br>那么就选一个自己当前需要的吧。 比如我要用 8.0 的话，那么就执行如下命令</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">docker pull tomcat:8.0</code></pre>\n\n<p>不同镜像的用法不一样，在它的描述里都有详细讲解如何启动等等信息：</p>\n<p><a href=\"https://hub.docker.com/_/tomcat?tab=description&page=2\">https://hub.docker.com/_/tomcat?tab=description&amp;page=2</a></p>\n<p>比如这个8.0,按照官方指导启动办法：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">docker run -it --rm -p 8888:8080 tomcat:8.0</code></pre>\n\n\n<p>这个 –rm 表示如果容器已经存在了，自动删除容器</p>\n<p>最后访问： http:&#x2F;&#x2F;<ip>:8888 就可以正常访问了</p>\n<p><strong>3. images 查看本地有些什么镜像</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">docker images</code></pre>\n<p><strong>4. rmi 删除本地镜像</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">docker images\ndocker rmi docker.io&#x2F;tomcat:8.0</code></pre>\n<p>有时候为了调试，需要不厌其烦地删除镜像，下面这句话就会自动删除所有镜像啦</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">docker rmi $(docker images -q)</code></pre>\n<p><strong>5. 修改本地镜像名称 tag</strong></p>\n<p>通过tag可以对镜像进行标记，如图所示，把 docker.io&#x2F;tomcat:8.0 标记成了docker.io&#x2F;mytomcat:8.0</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">docker tag docker.io&#x2F;tomcat:8.0 docker.io&#x2F;mytomcat:8.0</code></pre>\n\n<p>这样 image_id&#x3D; “ef6a7c98d192” 的镜像，就有两个标记了，分别是<br>docker.io&#x2F;tomcat:8.0<br>docker.io&#x2F;mytomcat:8.0</p>\n<p><strong>6. push , 把镜像提交到仓库</strong></p>\n<p><strong>注册账号</strong></p>\n<p>仓库位于 hub.docker.com 上，为了提交新的镜像，肯定要有账号才行，所以第一步是注册账号。</p>\n<p><strong>登录</strong><br>这里说的登录，不是在 hub.docker.com 网站上，而是在 docker 后台进行登录。<br>执行命令：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">docker login</code></pre>\n<p>然后输入账号密码就行了。</p>\n<p>注意，账号不是邮箱地址哦</p>\n<p><strong>push</strong></p>\n<p>推送镜像到仓库<br>首先镜像命名要符合 aaa&#x2F;bbb 这样的风格，即斜杠前面必须是你的账号名,冒号后为版本 如果镜像不是这个名字，可以通过 tag进行标记。 </p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">docker push aaa&#x2F;bbb:8.0</code></pre>\n\n<p>耗时多久，取决于你的镜像大小~</p>\n<h3 id=\"容器管理\"><a href=\"#容器管理\" class=\"headerlink\" title=\"容器管理\"></a>容器管理</h3><p><img src=\"https://raw.githubusercontent.com/xiaohai-store/notes-img/main/2.png\" alt=\"2\"></p>\n<ol>\n<li>运行 run</li>\n</ol>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">docker run --name some-mysql -v ~&#x2F;.halo&#x2F;mysql:&#x2F;var&#x2F;lib&#x2F;mysql --privileged&#x3D;true -p 3306:3306 -e MYSQL_ROOT_PASSWORD&#x3D;my-secret-pw --net halo-net --restart&#x3D;unless-stopped -d mysql:8.0.27</code></pre>\n<ul>\n<li>–name： 为容器指定一个名称</li>\n</ul>\n<ul>\n<li>-v ~&#x2F;.halo&#x2F;mysql:&#x2F;var&#x2F;lib&#x2F;mysql 命令: 将宿主机的目录 ~&#x2F;.halo&#x2F;mysql 挂载到容器内部的目录 &#x2F;var&#x2F;lib&#x2F;mysql，默认情况下 MySQL 将向 ~&#x2F;.halo&#x2F;mysql 写入其数据文件。</li>\n</ul>\n<ul>\n<li>-p： 端口映射，格式为 主机(宿主)端口:容器端口 ，可在 application.yaml 配置。</li>\n<li>-e MYSQL_ROOT_PASSWORD&#x3D;my-secret-pw: 指定MySQL的登录密码为 my-secret-pw</li>\n<li>–net halo-net: 将该容器加入到 halo-net 网络,连接到 halo-net 网络的任何其他容器都可以访问 some-mysql容器上的所有端口。</li>\n<li>–restart： 建议设置为 unless-stopped，在 Docker 启动的时候自动启动 some-mysql 容器。</li>\n<li>-dit 是 -d -i -t 的缩写。 -d ，表示 detach，即在后台运行。 -i 表示提供交互接口，这样才可以通过 docker 和 跑起来的操作系统交互。 -t 表示提供一个 tty (伪终端)，与 -i 配合就可以通过 ssh 工具连接到 这个容器里面去了</li>\n<li>–privileged 启动容器的时候，把权限带进去。 这样才可以在容器里进行完整的操作</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Centos7的安全Selinux禁止了一些安全权限，导致挂载信息时出出现权限不足，<br>run命令行添加 –privileged&#x3D;true</p></blockquote>\n<ol start=\"2\">\n<li>进入 exec attach</li>\n</ol>\n<p>  some-mysql 为 MySQL 实例的容器名称</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">docker exec -it some-mysql &#x2F;bin&#x2F;bash</code></pre>\n\n<ol start=\"3\">\n<li>生命周期管理， 暂停，恢复，停止，启动 pause, unpause, stop, start</li>\n</ol>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">暂停：pause\n恢复：unpause\n停止：stop\n开始：start</code></pre>\n<ol start=\"4\">\n<li>ps 查看所有的容器<br>查询所有的容器<pre class=\"line-numbers language-none\"><code class=\"language-none\">docker ps</code></pre>\n查询查询 run 状态的和 pause 状态的， stop状态的就不会查询出来了<pre class=\"line-numbers language-none\"><code class=\"language-none\">docker ps -a</code></pre></li>\n<li>检查某个具体的容器  inspect</li>\n</ol>\n<p>检查这个容器里的各项信息，</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">docker inspect some-mysql</code></pre>\n<ol start=\"6\">\n<li>rm 删除容器</li>\n</ol>\n<p>删除容器，与删除镜像 rmi 命令遥相呼应。。。。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">docker rm some-mysql</code></pre>\n\n<p>在运行中的 容器是不能删除的，要先 stop ,然后再删除。</p>\n<ol start=\"7\">\n<li><p>commit，对容器做了修改后，把改动后的容器，再次转换为镜像</p>\n<p>commit 很有意思了，因为它的作用就是把一个活生生的容器，再转换为镜像。</p>\n<p>使用办法：</p>\n</li>\n</ol>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">docker commit some-mysql new-mysql:now</code></pre>\n","text":"docker更新 yum我们会通过 yum 来安装 Docker, 所以首先更新 yum yum -y update 安装docker接着就是安装 Docker yum install docker -y 仅仅安装了还不行，还要启动 systemctl start docker....","link":"","photos":[],"count_time":{"symbolsCount":"3.2k","symbolsTime":"3 mins."},"categories":[{"name":"docker","slug":"docker","count":4,"path":"api/categories/docker.json"}],"tags":[{"name":"docker","slug":"docker","count":4,"path":"api/tags/docker.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#docker\"><span class=\"toc-text\">docker</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9B%B4%E6%96%B0-yum\"><span class=\"toc-text\">更新 yum</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%89%E8%A3%85docker\"><span class=\"toc-text\">安装docker</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%95%9C%E5%83%8F%E7%AE%A1%E7%90%86\"><span class=\"toc-text\">镜像管理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86\"><span class=\"toc-text\">容器管理</span></a></li></ol></li></ol>","author":{"name":"小海","slug":"blog-author","avatar":"/avatar/avatar.jpg","link":"/","description":"用一点点代码,改变生活","socials":{"github":"https://github.com/wch2019","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_27873145","juejin":"","customs":{"gitee":{"icon":"/svg/gitee-fill-round.svg","link":"https://gitee.com/wch2019"}}}},"mapped":true,"prev_post":{"title":"linux 查看防火墙状态","uid":"3a82a96064298ae3557311afb39a2155","slug":"linux 查看防火墙状态","date":"2022-05-17T08:43:42.000Z","updated":"2023-03-15T05:11:52.119Z","comments":true,"path":"api/articles/linux 查看防火墙状态.json","keywords":null,"cover":"../images/linux.jpg","text":"linux 查看防火墙状态1.查看防火墙状态 systemctl status firewalld firewall-cmd –state #查看默认防火墙状态(关闭后显示notrunning，开启后显示running) 2.查看防火墙是否开机启动 systemctl is-en...","link":"","photos":[],"count_time":{"symbolsCount":367,"symbolsTime":"1 mins."},"categories":[{"name":"Linux","slug":"Linux","count":1,"path":"api/categories/Linux.json"}],"tags":[{"name":"Linux","slug":"Linux","count":1,"path":"api/tags/Linux.json"}],"author":{"name":"小海","slug":"blog-author","avatar":"/avatar/avatar.jpg","link":"/","description":"用一点点代码,改变生活","socials":{"github":"https://github.com/wch2019","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_27873145","juejin":"","customs":{"gitee":{"icon":"/svg/gitee-fill-round.svg","link":"https://gitee.com/wch2019"}}}}},"next_post":{}}